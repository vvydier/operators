apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    alm-examples: |-
      [{
         "apiVersion": "apm.newrelic.com/v1alpha1",
         "kind": "NewRelic",
         "metadata": {
            "name": "example-newrelic"
         },
         "spec": {
            "image": {
               "registry": "registry.access.redhat.com",
               "repository": "newrelic-openshift/newrelic-infrastructure-k8s-1",
               "tag": "latest",
               "pullPolicy": "IfNotPresent"
            },
            "service": {
               "type": "ClusterIP",
               "port": 3306
            },
            "serviceAccountName": "newrelic-operator",
            "resources": {}
         }
      }]
    categories: "Monitoring,OpenShift Optional"
    capabilities: "Basic Install"
    certified: "true"
    containerImage: registry.connect.redhat.com/newrelic-openshift/newrelic-infra-agent
    createdAt: 2019-04-18T12:59:59Z
    description: Deploy the NewRelic agent from a helm chart onto your Kubernetes or OpenShift cluster
    repository: https://github.com/RHC4TP/operators/tree/master/partners/newrelic-operator
    support: Red Hat Connect
  name: newrelic-operator.v0.0.3
  namespace: "placeholder"
spec:
  apiservicedefinitions: {}
  customresourcedefinitions:
    owned:
      - description: NewRelic Operator by Red Hat Partner Connect
        displayName: NewRelic Operator
        kind: NewRelic
        name: newrelics.apm.newrelic.com
        resources:
          - kind: Deployment
            name: ""
            version: apps/v1
          - kind: Pod
            name: ""
            version: v1
          - kind: Service
            name: ""
            version: v1
          - kind: Secret
            name: ""
            version: v1
          - kind: ConfigMap
            name: ""
            version: v1
        specDescriptors:
          - description: The registry base URL fo NewRelic
            displayName: Registry URL
            path: image.repository
          - description: Registry namespace/repository for NewRelic
            displayName: Image Repository
            path: image.repository
          - description: Container image tag for NewRelic
            displayName: Image Tag
            path: image.tag
          - description: Image pull policy stating whether or not to pull from the local image store
            displayName: Pull Policy
            path: image.pullPolicy
          - description:  Service type to create
            displayName: Service Type
            path: service.type
            x-descriptors:
              - 'urn:alm:descriptor:io.kubernetes:core:v1:Service'
          - description:  Service port to expose internally
            displayName: Service Port
            path: service.port
            x-descriptors:
              - 'urn:alm:descriptor:io.kubernetes:core:v1:Service'
          - description: Service account name used to deploy NewRelic
            displayName: Service Account Name
            path: serviceAccountName
          - description: Define resources requests and limits for individual Pods
            displayName: Resource Requirements
            path: resources
            x-descriptors:
              - 'urn:alm:descriptor:com.tectonic.ui:resourceRequirements'
        statusDescriptors:
          - description: Current deployed state
            displayName: Conditions
            path: conditions
            x-descriptors:
              - 'urn:alm:descriptor:io.kubernetes.conditions'
        version: v1alpha1
  description: |
    This is an Operator for NewRelic, developed using the NewRelic helm chart available at [Newrelic's GitHub](https://github.com/helm/charts/tree/master/stable/newrelic-infrastructure).
    
    The operator will deploy the NewRelic agent (using the helm chart) on your Kubernetes or OpenShift cluster as a Daemonset.

    ## Prerequisites
    The NewRelic Operator will (by default) deploy the latest version of NewRelic Infrastructure from Red Hat Software Collections for RHEL 7.
    The image will pull from the [Red Hat Container Catalog](https://access.redhat.com/containers), which will require the following:

    * RHN account (https://access.redhat.com)
    * RHCC Image pull secret in your project/namespace or [Red Hat Container Registry Authentication](https://access.redhat.com/RegistryAuthentication) setup on your OpenShift cluster

    To create an `rhcc` secret using docker (requires root/sudo or you must be in the docker group):
    ```
    # docker login -u <username> registry.connect.redhat.com
    Password:
    Login Succeeded
    # oc create secret generic rhcc --from-file=.dockerconfigjson=$HOME/.docker/config.json --type=kubernetes.io/dockerconfigjson
    ```

    To create an `rhcc` secret using podman:
    ```
    $ podman login -u <username> registry.connect.redhat.com
    Password:
    Login Succeeded!
    $ oc create secret generic rhcc --from-file=.dockerconfigjson=$XDG_RUNTIME_DIR/containers/auth.json --type=kubernetes.io/dockerconfigjson
    ```

    To link the `rhcc` secret to the `default` service account to use as an image pull secret in the current project/namespace:
    ```
    $ oc secrets link default rhcc --for=pull
    ```

    ## Required Parameters
    There is only one required parameter, and that is the Agent Key available by logging into [NewRelic](https://infrastructure.newrelic.com).
  
    Note that the Agent Key is kept in a base64-encoded K8s Secret, however the key is also visible as plain text within the Custom Resource spec.
      
    Values listed below are relative to the `spec:` field in the Custom Resource.
     
    * **newrelic.agent.key** - Your NewRelic Agent Key

    ## Advanced Features

    This is mostly a TODO section, however you can define your own values as required for the following fields:

    Values are relative to the `spec:` field in the Custom Resource.

    * **image.registry** - The dns hostname of the desired container image registry (defaults to `registry.access.redhat.com`)
    * **image.repository** - The repository path (appended to the registry URL) above where the container image resides (defaults to `rhscl/newrelic-102-rhel`)
    * **image.tag** - The container image tag (defaults to `:latest`)
    * **db.config** - The NewRelic configuration populating `my.cnf` inside the container. Keep in mind that the `rhscl/newrelic-102-rhel` container is hard-coded to expose port 3306 (if you want to change this then you'll have to specify a custom MariaDB container image)
    * **resources** - Define your own Pod resource limits (`limits.cpu` and `limits.memory`)
    * **service.type** - The type of Service to configure for NewRelic (defaults to `ClusterIP`)
    * **service.port** - The TCP port that the Service will listen on    
    * **serviceAccountName** - The name of the service account used to deploy NewRelic (NOTE: This **must** match what is defined in the ClusterServiceVersion)
  displayName: NewRelic Operator
  icon:
    - base64data: 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
      mediatype: "image/png"
  install:
    spec:
      deployments:
        - name: newrelic-operator
          spec:
            replicas: 1
            selector:
              matchLabels:
                name: newrelic-operator
            template:
              metadata:
                labels:
                  name: newrelic-operator
              spec:
                serviceAccountName: newrelic-operator
                containers:
                  - name: newrelic-operator
                    # Replace this with the built image name
                    image: registry.connect.redhat.com/newrelic-openshift/newrelic-infra-agent
                    imagePullPolicy: Always
                    env:
                      - name: WATCH_NAMESPACE
                        valueFrom:
                          fieldRef:
                            fieldPath: metadata.namespace
                      - name: POD_NAME
                        valueFrom:
                          fieldRef:
                            fieldPath: metadata.name
                      - name: OPERATOR_NAME
                        value: "newrelic-operator"            
      permissions:
        - rules:
          - apiGroups:
            - ""
            resources:
            - pods
            - services
            - endpoints
            - persistentvolumeclaims
            - events
            - configmaps
            - secrets
            verbs:
            - '*'
          - apiGroups:
            - ""
            resources:
            - namespaces
            verbs:
            - get
          - apiGroups:
            - apps
            resources:
            - deployments
            - daemonsets
            - replicasets
            - statefulsets
            verbs:
            - '*'
          - apiGroups:
            - monitoring.coreos.com
            resources:
            - servicemonitors
            verbs:
            - get
            - create
          - apiGroups:
            - apps
            resourceNames:
            - newrelic-operator
            resources:
            - deployments/finalizers
            verbs:
            - update
          - apiGroups:
            - apm.newrelic.com
            resources:
            - '*'
            verbs:
            - '*' 
          serviceAccountName: newrelic-operator
      # Required to run on OpenShift
      #clusterPermissions:
      #  - rules:
      #      - verbs:
      #          - use
      #        apiGroups:
      #          - security.openshift.io
      #        resources:
      #          - securitycontextconstraints
      #        resourceNames:
      #          - anyuid
      #    serviceAccountName: newrelic-operator
    strategy: deployment
  installModes:
    - supported: true
      type: OwnNamespace
    - supported: true
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: false
      type: AllNamespaces
  keywords:
    - database
    - sql
  links:
    - name: NewRelic Operator - RHC4TP GitHub
      url: https://github.com/newrelic/operators/tree/master/partners/newrelic-operator
    - name: Partner Guide for Certifying your Operator
      url: https://operators.gitbook.io/partner-guide-for-certifying-your-operator/
  maintainers:
    - email: connect@redhat.com
      name: Red Hat Partner Connect
  maturity: alpha
  provider:
    name: Red Hat Partner Connect
  version: 0.0.3
